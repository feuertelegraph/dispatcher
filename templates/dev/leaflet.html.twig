{% extends 'layouts/screenfill.html.twig' %}

{% set boxClasses = "bg-gray-300 rounded-xl shadow-lg" %}

{% block content %}
    <div class="relative h-full">
        <div id="dispatcher-map" class="block h-full"></div>
        <div id="dispatcher-map-toolbar" class="block p-4 flex flex-col justify-start gap-4 absolute top-0 right-0" style="z-index: 10000;">
            <div class="{{ boxClasses }}">
                <h3 class="text-lg font-bold text-dp-orange bg-gray-200 p-1.5 border-b-2 border-dp-orange">Legende</h3>
                <ul class="flex w-full flex-col gap-2 px-1.5 py-2">
                    {% for label, group in toggleableElements %}
                    <li>
                        <input
                                type="checkbox"
                                id="checkbox_{{ group }}"
                                onclick="mapToggleCheckbox(event);"
                                class="hidden peer"
                                name="{{ group }}"
                                checked />
                        <label for="checkbox_{{ group }}" class="rounded-lg inline-flex items-center justify-between w-full py-1 px-2 bg-gray-100
                         border-2 border-gray-200 cursor-pointer select-none peer-checked:border-dp-orange-600 hover:text-dp-orange hover:bg-gray-50">
                            <div class="block">
                                {{ label }}
                            </div>
                        </label>
                    </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="{{ boxClasses }}">
                <h3 class="text-lg font-bold text-dp-orange bg-gray-200 p-1.5 border-b-2 border-dp-orange">Positionen</h3>
                <ul class="grid grid-cols-2 w-full gap-2 px-1.5 py-2">
                    {% for label, group in toggleableUnits %}
                        <li>
                            <input
                                    type="checkbox"
                                    id="checkbox_{{ group }}"
                                    onclick="mapToggleCheckbox(event);"
                                    class="hidden peer"
                                    name="{{ group }}"
                                    checked />
                            <label for="checkbox_{{ group }}" class="rounded-lg inline-flex items-center justify-between w-full py-1 px-2 bg-gray-100
                         border-2 border-gray-200 cursor-pointer select-none peer-checked:border-dp-orange-600 hover:text-dp-orange hover:bg-gray-50">
                                <div class="block">
                                    {{ label }}
                                </div>
                            </label>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="{{ boxClasses }}">
                <h3 class="text-lg font-bold text-dp-orange bg-gray-200 p-1.5 border-b-2 border-dp-orange">Abteilungen</h3>
            </div>
            <div class="{{ boxClasses }}">
                <h3 class="text-lg font-bold text-dp-orange bg-gray-200 p-1.5 border-b-2 border-dp-orange">Ankunftszeit Mitglieder</h3>
                <div class="p-1.5">
                    <input id="default-range" type="range" value="50" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-400">
                </div>
            </div>
            <div class="{{ boxClasses }}">
                <h3 class="text-lg font-bold text-dp-orange bg-gray-200 p-1.5 border-b-2 border-dp-orange">Hilfsfrist</h3>
                <div class="p-1.5">
                    <input
                            type="checkbox"
                            id="checkbox_deadline"
                            onclick="deadlineToggleCheckbox(event);"
                            class="hidden peer"
                            name="checkbox_deadline"
                            checked />
                    <label for="checkbox_deadline" class="rounded-lg inline-flex items-center justify-between w-full py-1 px-2 bg-gray-100
                             border-2 border-gray-200 cursor-pointer select-none peer-checked:border-dp-orange-600 hover:text-dp-orange hover:bg-gray-50">
                        <div class="block">
                            Hilfsfrist eing.
                        </div>
                    </label>
                </div>
            </div>
        </div>
    </div>
    <script>

        const demoData = {
            "type": "FeatureCollection",
            "features": [
                {
                    "type": "Feature",
                    "properties": {
                        "type": "firestation",
                        "marker-color": "#00eeff",
                        "marker-size": "medium",
                        "marker-symbol": "circle"
                    },
                    "geometry": {
                        "coordinates": [
                            8.78495659758525,
                            50.01063510316243
                        ],
                        "type": "Point"
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "coverageArea"
                    },
                    "geometry": {
                        "coordinates": [
                            [
                                [
                                    8.771855211957131,
                                    50.019083398125304
                                ],
                                [
                                    8.76513861722924,
                                    50.01638060437347
                                ],
                                [
                                    8.765884905531834,
                                    50.00059674077667
                                ],
                                [
                                    8.796821947918119,
                                    49.99937567347348
                                ],
                                [
                                    8.807337828553244,
                                    50.01080016210784
                                ],
                                [
                                    8.793701105922452,
                                    50.0209142365419
                                ],
                                [
                                    8.771855211957131,
                                    50.019083398125304
                                ]
                            ]
                        ],
                        "type": "Polygon"
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "firestation",
                        "marker-color": "#00eeff",
                        "marker-size": "medium",
                        "marker-symbol": "circle"
                    },
                    "geometry": {
                        "coordinates": [
                            8.799522154490603,
                            50.05496742656692
                        ],
                        "type": "Point"
                    },
                    "id": 2
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "coverageArea"
                    },
                    "geometry": {
                        "coordinates": [
                            [
                                [
                                    8.795309977729033,
                                    50.0628225325612
                                ],
                                [
                                    8.777759241223038,
                                    50.062693770700434
                                ],
                                [
                                    8.773647354384309,
                                    50.053872760524655
                                ],
                                [
                                    8.782472867598727,
                                    50.04073482009244
                                ],
                                [
                                    8.829308261588977,
                                    50.04769064829344
                                ],
                                [
                                    8.822689126678682,
                                    50.0628225325612
                                ],
                                [
                                    8.795309977729033,
                                    50.0628225325612
                                ]
                            ]
                        ],
                        "type": "Polygon"
                    },
                    "id": 3
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "member",
                        "name": "Florian Nord",
                        "unit": "Angriffstrupp",
                        "timeToStation": 100,
                        "marker-color": "#00ff2a",
                        "marker-size": "medium",
                        "marker-symbol": "circle"
                    },
                    "geometry": {
                        "coordinates": [
                            8.809062046708362,
                            50.05954009961221
                        ],
                        "type": "Point"
                    },
                    "id": 4
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "occasion",
                        "occasionType": "fire",
                        "marker-color": "#ff8800",
                        "marker-size": "medium",
                        "marker-symbol": "circle",
                        "deadlineFulfilled": true
                    },
                    "geometry": {
                        "coordinates": [
                            8.787689614661474,
                            50.05808341117563
                        ],
                        "type": "Point"
                    },
                    "id": 5
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "occasion",
                        "occasionType": "help",
                        "deadlineFulfilled": false,
                        "marker-color": "#9900ff",
                        "marker-size": "medium",
                        "marker-symbol": "circle"
                    },
                    "geometry": {
                        "coordinates": [
                            8.805229618286546,
                            50.05152901797268
                        ],
                        "type": "Point"
                    },
                    "id": 6
                }
            ]
        };
    </script>
    <script>
        var map = L.map('dispatcher-map');

        window.filterProps = {
            types: ["occasions", "firestations", "members", "coverageAreas"],
            units: [],
            functions: [],
            eventOccasionStart: null,
            eventOccasionEnd: null,
            memberArrivalMinTime: 0,
            memberArrivalMaxTime: null,
            deadlineFulfilled: true
        }

        let layers = {
            occasions: undefined,
            firestations: undefined,
            members: undefined,
            coverageAreas: undefined
        }

        let tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        });

        var jsonData = demoData;

        function genIcon(path) {
            return L.icon({
                iconUrl: path,
                iconSize: [32, 32],
                iconAnchor: [16, 16],
            })
        }

        function dataToLayer(data, type, popupTextFunction, fIcon, filterProps = {}) {
            return L.geoJSON(data, {
                filter: constructFilter(type, filterProps),
                pointToLayer: function(feature, latlong) {
                    return L.marker(latlong, {
                        icon: fIcon(feature)
                    }).on('mouseover', function() {
                        this.bindPopup(popupTextFunction(feature)).openPopup();
                    });
                }
            })
        }

        function mapToggleCheckbox(event) {
            event.target.checked ? window.filterProps.types.push(event.target.name) :
                window.filterProps.types = window.filterProps.types.filter((name) => event.target.name !== name)
            renderData()
        }

        function functionToggleCheckbox(event) {
            event.target.checked ? window.filterProps.functions.push(event.target.name) :
                window.filterProps.functions = window.filterProps.functions.filter((name) => event.target.name !== name)
            renderData()
        }

        function unitToggleCheckbox(event) {
            event.target.checked ? window.filterProps.units.push(event.target.name) :
                window.filterProps.units = window.filterProps.units.filter((name) => event.target.name !== name)
            renderData()
        }

        function deadlineToggleCheckbox(event) {
            window.filterProps.deadlineFulfilled = event.target.checked
            renderData()
        }

        function constructFilter(type) {
            return (feature, layer) => {
                let functFilter, unitFilter, deadlineFilter = true;
                if (feature.properties.type === 'member') {
                    functFilter = window.filterProps.unit ?
                        feature.properties.unit === window.filterProps.unit : true;
                    functFilter = window.filterProps.funct ?
                        feature.properties.funct === window.filterProps.funct : true;
                }
                if (feature.properties.type === 'occasion') {
                    deadlineFilter = feature.properties.deadlineFulfilled === window.filterProps.deadlineFulfilled;
                }
                return feature.properties.type === type && deadlineFilter;
                //  && functFilter && unitFilter && deadlineFilter
            }
        }

        function renderData() {
            layers.occasions = dataToLayer(jsonData, 'occasion', (feature) => {
                return `<b>Einsatz</b><br>
                    <b>Art des Einsatzes: </b>${feature.properties.occasionType}<br>
                    <b>Hilfsfrist eing.: </b>${JSON.parse(feature.properties.deadlineFulfilled) ? "Ja" : "Nein"}`
            }, (feature) => {
                if (feature.properties.occasionType == 'fire') {
                    return genIcon('{{ asset('images/markers/occasion_fire.png') }}')
                } else {
                    return genIcon('{{ asset('images/markers/occasion_help.png') }}')
                }
            }, constructFilter("occasion"))

            layers.firestations = dataToLayer(jsonData, 'firestation',  (feature) => {
                    return `<b>Feuerwehrhaus</b>`
                }, (feature) => genIcon('{{ asset('images/markers/firestation.png') }}'),
                constructFilter("firestation"))

            layers.members = dataToLayer(jsonData, 'member', (feature) => {
                    return `<b>akt. Mitglied</b><br>
                    <b>Name: </b>${feature.properties.name}<br>
                    <b>Einheit: </b>${feature.properties.unit}<br>`
                }, (feature) => genIcon('{{ asset('images/markers/member.png') }}'),
                constructFilter("member"))

            layers.coverageAreas = dataToLayer(jsonData, 'coverageArea', (feature) => genIcon('{{ asset('images/markers/blank.png') }}'), constructFilter("coverageArea"))

            // since leaflet does not parse the layer reference correctly, this is a workaround
            // TODO fix
            map.eachLayer(function (layer) {
                map.removeLayer(layer)
            });
            map.addLayer(tiles)

            for (const [layerName, layer] of Object.entries(layers)) {
                filterProps.types.find((e) => e === layerName) ?
                    map.addLayer(layer) :
                    map.removeLayer(layer)
            }

            map.fitBounds(L.geoJSON(jsonData).getBounds(), {
                padding: [50, 50]
            })
        }

        renderData()
    </script>
{% endblock %}